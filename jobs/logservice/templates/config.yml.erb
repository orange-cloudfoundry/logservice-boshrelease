<%
require 'yaml'

credentials = {
  "log" => {
    "level"           => p('logservice.log.level'),
    "json"            => true,
    "no_color"        => true,
    "enable_profiler" => false,
  },
  "web" => {
    "port" => p('logservice.web.port'),
    "tls" => {
      "port"      => p('logservice.web.tls.port'),
      "cert_file" => "",
      "key_file"  => "",
    },
    "max_keep_alive" => {
      "disabled"  => p('logservice.web.max_keep_alive.disabled'),
      "duration"  => p('logservice.web.max_keep_alive.duration'),
      "fuzziness" => p('logservice.web.max_keep_alive.fuzziness'),
    },
  },
  "broker" => {
    "public_host"            => p('logservice.broker.public_host'),
    "drain_host"             => p('logservice.broker.drain_host'),
    "username"               => p('logservice.broker.username'),
    "password"               => p('logservice.broker.password'),
    "force_empty_drain_type" => p('logservice.broker.force_empty_drain_type'),
    "virtual_host"           => false,
  },
  "forwarder" => {
    "allowed_hosts"  => p('logservice.forwarder.allowed_hosts'),
    "parsing_keys"   => p('logservice.forwarder.parsing_keys'),
  },
  "binding_cache" => {
    "duration" => p('logservice.binding_cache.duration'),
    "pre_cache" => p('logservice.binding_cache.pre_cache'),
  },
  "db" => {
    "sqlite_fallback"      => false,
    "cnx_max_open"         => p('logservice.db.cnx.max_open'),
    "cnx_max_idle"         => p('logservice.db.cnx.max_idle'),
    "cnx_max_life"         => p('logservice.db.cnx.max_life'),
  },
  "syslog_addresses" => p('logservice.syslog_addresses')
}

if_p('logservice.web.tls.cert') do |val|
  credentials["web"]["tls"]["cert_file"] = "/var/vcap/jobs/logservice/config/ssl_cert.pem"
  credentials["web"]["tls"]["key_file"]  = "/var/vcap/jobs/logservice/config/ssl_key.pem"
end

config = {
  "services" => [
    {
      "name" => "my-config",
      "tags" => [ "config" ],
      "credentials" => credentials
    },
    {
      "name"         => "mysql",
      "credentials"  => {
        "user"     => p('logservice.db.user'),
        "password" => p('logservice.db.password'),
        "host"     => p('logservice.db.host'),
        "port"     => p('logservice.db.port'),
        "database" => p('logservice.db.database'),
        "options"  => p('logservice.db.options'),
      }
    }
  ]
}
%>

# run with following command:
# CLOUD_FILE=/var/vcap/jobs/logservice/config/config.yml /var/vcap/packages/logservice/bin/logs-service-broker
<%= config.to_yaml %>
